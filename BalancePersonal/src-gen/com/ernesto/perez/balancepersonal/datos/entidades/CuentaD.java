package com.ernesto.perez.balancepersonal.datos.entidades;

import com.ernesto.perez.balancepersonal.daos.DaoSession;
import de.greenrobot.dao.DaoException;

import com.ernesto.perez.balancepersonal.daos.BancoDDao;
import com.ernesto.perez.balancepersonal.daos.CuentaDDao;
import com.ernesto.perez.balancepersonal.daos.OrigenFinancieroDDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CUENTA_D.
 */
public class CuentaD {

    private Long idOrigenFinanciero;
    /** Not-null value. */
    private String nroCuenta;
    private long idBanco;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CuentaDDao myDao;

    private OrigenFinancieroD cuenta;
    private Long cuenta__resolvedKey;

    private BancoD banco;
    private Long banco__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public CuentaD() {
    }

    public CuentaD(Long idOrigenFinanciero) {
        this.idOrigenFinanciero = idOrigenFinanciero;
    }

    public CuentaD(Long idOrigenFinanciero, String nroCuenta, long idBanco) {
        this.idOrigenFinanciero = idOrigenFinanciero;
        this.nroCuenta = nroCuenta;
        this.idBanco = idBanco;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCuentaDDao() : null;
    }

    public Long getIdOrigenFinanciero() {
        return idOrigenFinanciero;
    }

    public void setIdOrigenFinanciero(Long idOrigenFinanciero) {
        this.idOrigenFinanciero = idOrigenFinanciero;
    }

    /** Not-null value. */
    public String getNroCuenta() {
        return nroCuenta;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNroCuenta(String nroCuenta) {
        this.nroCuenta = nroCuenta;
    }

    public long getIdBanco() {
        return idBanco;
    }

    public void setIdBanco(long idBanco) {
        this.idBanco = idBanco;
    }

    /** To-one relationship, resolved on first access. */
    public OrigenFinancieroD getCuenta() {
        Long __key = this.idOrigenFinanciero;
        if (cuenta__resolvedKey == null || !cuenta__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrigenFinancieroDDao targetDao = daoSession.getOrigenFinancieroDDao();
            OrigenFinancieroD cuentaNew = targetDao.load(__key);
            synchronized (this) {
                cuenta = cuentaNew;
            	cuenta__resolvedKey = __key;
            }
        }
        return cuenta;
    }

    public void setCuenta(OrigenFinancieroD cuenta) {
        synchronized (this) {
            this.cuenta = cuenta;
            idOrigenFinanciero = cuenta == null ? null : cuenta.getId();
            cuenta__resolvedKey = idOrigenFinanciero;
        }
    }

    /** To-one relationship, resolved on first access. */
    public BancoD getBanco() {
        long __key = this.idBanco;
        if (banco__resolvedKey == null || !banco__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BancoDDao targetDao = daoSession.getBancoDDao();
            BancoD bancoNew = targetDao.load(__key);
            synchronized (this) {
                banco = bancoNew;
            	banco__resolvedKey = __key;
            }
        }
        return banco;
    }

    public void setBanco(BancoD banco) {
        if (banco == null) {
            throw new DaoException("To-one property 'idBanco' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.banco = banco;
            idBanco = banco.getId();
            banco__resolvedKey = idBanco;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
