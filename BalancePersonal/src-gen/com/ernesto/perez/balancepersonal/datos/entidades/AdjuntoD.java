package com.ernesto.perez.balancepersonal.datos.entidades;

import com.ernesto.perez.balancepersonal.daos.DaoSession;
import de.greenrobot.dao.DaoException;

import com.ernesto.perez.balancepersonal.daos.AdjuntoDDao;
import com.ernesto.perez.balancepersonal.daos.ImagenDDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table ADJUNTO_D.
 */
public class AdjuntoD {

    private Long id;
    private String nota;
    private Long idImagen;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AdjuntoDDao myDao;

    private ImagenD captura;
    private Long captura__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public AdjuntoD() {
    }

    public AdjuntoD(Long id) {
        this.id = id;
    }

    public AdjuntoD(Long id, String nota, Long idImagen) {
        this.id = id;
        this.nota = nota;
        this.idImagen = idImagen;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAdjuntoDDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNota() {
        return nota;
    }

    public void setNota(String nota) {
        this.nota = nota;
    }

    public Long getIdImagen() {
        return idImagen;
    }

    public void setIdImagen(Long idImagen) {
        this.idImagen = idImagen;
    }

    /** To-one relationship, resolved on first access. */
    public ImagenD getCaptura() {
        Long __key = this.idImagen;
        if (captura__resolvedKey == null || !captura__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ImagenDDao targetDao = daoSession.getImagenDDao();
            ImagenD capturaNew = targetDao.load(__key);
            synchronized (this) {
                captura = capturaNew;
            	captura__resolvedKey = __key;
            }
        }
        return captura;
    }

    public void setCaptura(ImagenD captura) {
        synchronized (this) {
            this.captura = captura;
            idImagen = captura == null ? null : captura.getId();
            captura__resolvedKey = idImagen;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
