package com.ernesto.perez.balancepersonal.datos.entidades;

import java.util.List;
import com.ernesto.perez.balancepersonal.daos.DaoSession;
import de.greenrobot.dao.DaoException;

import com.ernesto.perez.balancepersonal.daos.BancoDDao;
import com.ernesto.perez.balancepersonal.daos.CuentaDDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table BANCO_D.
 */
public class BancoD {

    private Long id;
    /** Not-null value. */
    private String nombre;
    private int tipo;
    private long resImagen;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BancoDDao myDao;

    private List<CuentaD> cuentas;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public BancoD() {
    }

    public BancoD(Long id) {
        this.id = id;
    }

    public BancoD(Long id, String nombre, int tipo, long resImagen) {
        this.id = id;
        this.nombre = nombre;
        this.tipo = tipo;
        this.resImagen = resImagen;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBancoDDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getNombre() {
        return nombre;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public int getTipo() {
        return tipo;
    }

    public void setTipo(int tipo) {
        this.tipo = tipo;
    }

    public long getResImagen() {
        return resImagen;
    }

    public void setResImagen(long resImagen) {
        this.resImagen = resImagen;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CuentaD> getCuentas() {
        if (cuentas == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CuentaDDao targetDao = daoSession.getCuentaDDao();
            List<CuentaD> cuentasNew = targetDao._queryBancoD_Cuentas(id);
            synchronized (this) {
                if(cuentas == null) {
                    cuentas = cuentasNew;
                }
            }
        }
        return cuentas;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCuentas() {
        cuentas = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
