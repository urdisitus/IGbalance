package com.ernesto.perez.balancepersonal.entidades;

import java.util.List;
import com.ernesto.perez.balancepersonal.daos.DaoSession;
import de.greenrobot.dao.DaoException;

import com.ernesto.perez.balancepersonal.daos.CategoriaDao;
import com.ernesto.perez.balancepersonal.daos.ImagenDao;
import com.ernesto.perez.balancepersonal.daos.MovimientoDao;
import com.ernesto.perez.balancepersonal.daos.MovimientoPeriodicoDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CATEGORIA.
 */
public class Categoria {

    private Long id;
    /** Not-null value. */
    private String nombre;
    /** Not-null value. */
    private String descripcion;
    private int tipoCategoria;
    private int estado;
    private Long idImagen;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CategoriaDao myDao;

    private Imagen logo;
    private Long logo__resolvedKey;

    private List<Movimiento> movimientos;
    private List<MovimientoPeriodico> movimientosPeriodicos;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Categoria() {
    }

    public Categoria(Long id) {
        this.id = id;
    }

    public Categoria(Long id, String nombre, String descripcion, int tipoCategoria, int estado, Long idImagen) {
        this.id = id;
        this.nombre = nombre;
        this.descripcion = descripcion;
        this.tipoCategoria = tipoCategoria;
        this.estado = estado;
        this.idImagen = idImagen;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCategoriaDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getNombre() {
        return nombre;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    /** Not-null value. */
    public String getDescripcion() {
        return descripcion;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    public int getTipoCategoria() {
        return tipoCategoria;
    }

    public void setTipoCategoria(int tipoCategoria) {
        this.tipoCategoria = tipoCategoria;
    }

    public int getEstado() {
        return estado;
    }

    public void setEstado(int estado) {
        this.estado = estado;
    }

    public Long getIdImagen() {
        return idImagen;
    }

    public void setIdImagen(Long idImagen) {
        this.idImagen = idImagen;
    }

    /** To-one relationship, resolved on first access. */
    public Imagen getLogo() {
        Long __key = this.idImagen;
        if (logo__resolvedKey == null || !logo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ImagenDao targetDao = daoSession.getImagenDao();
            Imagen logoNew = targetDao.load(__key);
            synchronized (this) {
                logo = logoNew;
            	logo__resolvedKey = __key;
            }
        }
        return logo;
    }

    public void setLogo(Imagen logo) {
        synchronized (this) {
            this.logo = logo;
            idImagen = logo == null ? null : logo.getId();
            logo__resolvedKey = idImagen;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Movimiento> getMovimientos() {
        if (movimientos == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MovimientoDao targetDao = daoSession.getMovimientoDao();
            List<Movimiento> movimientosNew = targetDao._queryCategoria_Movimientos(id);
            synchronized (this) {
                if(movimientos == null) {
                    movimientos = movimientosNew;
                }
            }
        }
        return movimientos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMovimientos() {
        movimientos = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MovimientoPeriodico> getMovimientosPeriodicos() {
        if (movimientosPeriodicos == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MovimientoPeriodicoDao targetDao = daoSession.getMovimientoPeriodicoDao();
            List<MovimientoPeriodico> movimientosPeriodicosNew = targetDao._queryCategoria_MovimientosPeriodicos(id);
            synchronized (this) {
                if(movimientosPeriodicos == null) {
                    movimientosPeriodicos = movimientosPeriodicosNew;
                }
            }
        }
        return movimientosPeriodicos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMovimientosPeriodicos() {
        movimientosPeriodicos = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
