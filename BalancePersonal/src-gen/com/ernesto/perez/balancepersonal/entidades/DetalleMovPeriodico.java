package com.ernesto.perez.balancepersonal.entidades;

import java.util.List;
import com.ernesto.perez.balancepersonal.daos.DaoSession;
import de.greenrobot.dao.DaoException;

import com.ernesto.perez.balancepersonal.daos.DetalleMovPeriodicoDao;
import com.ernesto.perez.balancepersonal.daos.MovimientoDao;
import com.ernesto.perez.balancepersonal.daos.MovimientoPeriodicoDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table DETALLE_MOV_PERIODICO.
 */
public class DetalleMovPeriodico {

    private Long id;
    private long idMovPeriodico;
    private long idMovimiento;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DetalleMovPeriodicoDao myDao;

    private Movimiento movimiento;
    private Long movimiento__resolvedKey;

    private List<MovimientoPeriodico> movimientoPeriodico;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public DetalleMovPeriodico() {
    }

    public DetalleMovPeriodico(Long id) {
        this.id = id;
    }

    public DetalleMovPeriodico(Long id, long idMovPeriodico, long idMovimiento) {
        this.id = id;
        this.idMovPeriodico = idMovPeriodico;
        this.idMovimiento = idMovimiento;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDetalleMovPeriodicoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getIdMovPeriodico() {
        return idMovPeriodico;
    }

    public void setIdMovPeriodico(long idMovPeriodico) {
        this.idMovPeriodico = idMovPeriodico;
    }

    public long getIdMovimiento() {
        return idMovimiento;
    }

    public void setIdMovimiento(long idMovimiento) {
        this.idMovimiento = idMovimiento;
    }

    /** To-one relationship, resolved on first access. */
    public Movimiento getMovimiento() {
        long __key = this.idMovimiento;
        if (movimiento__resolvedKey == null || !movimiento__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MovimientoDao targetDao = daoSession.getMovimientoDao();
            Movimiento movimientoNew = targetDao.load(__key);
            synchronized (this) {
                movimiento = movimientoNew;
            	movimiento__resolvedKey = __key;
            }
        }
        return movimiento;
    }

    public void setMovimiento(Movimiento movimiento) {
        if (movimiento == null) {
            throw new DaoException("To-one property 'idMovimiento' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.movimiento = movimiento;
            idMovimiento = movimiento.getId();
            movimiento__resolvedKey = idMovimiento;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MovimientoPeriodico> getMovimientoPeriodico() {
        if (movimientoPeriodico == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MovimientoPeriodicoDao targetDao = daoSession.getMovimientoPeriodicoDao();
            List<MovimientoPeriodico> movimientoPeriodicoNew = targetDao._queryDetalleMovPeriodico_MovimientoPeriodico(id);
            synchronized (this) {
                if(movimientoPeriodico == null) {
                    movimientoPeriodico = movimientoPeriodicoNew;
                }
            }
        }
        return movimientoPeriodico;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMovimientoPeriodico() {
        movimientoPeriodico = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
