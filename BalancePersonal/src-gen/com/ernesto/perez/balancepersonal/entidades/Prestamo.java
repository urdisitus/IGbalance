package com.ernesto.perez.balancepersonal.entidades;

import java.util.List;
import com.ernesto.perez.balancepersonal.daos.DaoSession;
import de.greenrobot.dao.DaoException;

import com.ernesto.perez.balancepersonal.daos.ContactoDao;
import com.ernesto.perez.balancepersonal.daos.PrestamoDao;
import com.ernesto.perez.balancepersonal.daos.detallePrestamoDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table PRESTAMO.
 */
public class Prestamo {

    private Long id;
    /** Not-null value. */
    private java.util.Date fechaHora;
    private double monto;
    private int estado;
    private double saldo;
    private double montoPagado;
    private long idContacto;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PrestamoDao myDao;

    private Contacto contacto;
    private Long contacto__resolvedKey;

    private List<detallePrestamo> movimientos;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Prestamo() {
    }

    public Prestamo(Long id) {
        this.id = id;
    }

    public Prestamo(Long id, java.util.Date fechaHora, double monto, int estado, double saldo, double montoPagado, long idContacto) {
        this.id = id;
        this.fechaHora = fechaHora;
        this.monto = monto;
        this.estado = estado;
        this.saldo = saldo;
        this.montoPagado = montoPagado;
        this.idContacto = idContacto;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPrestamoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public java.util.Date getFechaHora() {
        return fechaHora;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFechaHora(java.util.Date fechaHora) {
        this.fechaHora = fechaHora;
    }

    public double getMonto() {
        return monto;
    }

    public void setMonto(double monto) {
        this.monto = monto;
    }

    public int getEstado() {
        return estado;
    }

    public void setEstado(int estado) {
        this.estado = estado;
    }

    public double getSaldo() {
        return saldo;
    }

    public void setSaldo(double saldo) {
        this.saldo = saldo;
    }

    public double getMontoPagado() {
        return montoPagado;
    }

    public void setMontoPagado(double montoPagado) {
        this.montoPagado = montoPagado;
    }

    public long getIdContacto() {
        return idContacto;
    }

    public void setIdContacto(long idContacto) {
        this.idContacto = idContacto;
    }

    /** To-one relationship, resolved on first access. */
    public Contacto getContacto() {
        long __key = this.idContacto;
        if (contacto__resolvedKey == null || !contacto__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactoDao targetDao = daoSession.getContactoDao();
            Contacto contactoNew = targetDao.load(__key);
            synchronized (this) {
                contacto = contactoNew;
            	contacto__resolvedKey = __key;
            }
        }
        return contacto;
    }

    public void setContacto(Contacto contacto) {
        if (contacto == null) {
            throw new DaoException("To-one property 'idContacto' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.contacto = contacto;
            idContacto = contacto.getId();
            contacto__resolvedKey = idContacto;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<detallePrestamo> getMovimientos() {
        if (movimientos == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            detallePrestamoDao targetDao = daoSession.getDetallePrestamoDao();
            List<detallePrestamo> movimientosNew = targetDao._queryPrestamo_Movimientos(id);
            synchronized (this) {
                if(movimientos == null) {
                    movimientos = movimientosNew;
                }
            }
        }
        return movimientos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMovimientos() {
        movimientos = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
