package com.ernesto.perez.balancepersonal.entidades;

import java.util.List;
import com.ernesto.perez.balancepersonal.daos.DaoSession;
import de.greenrobot.dao.DaoException;

import com.ernesto.perez.balancepersonal.daos.AjusteDao;
import com.ernesto.perez.balancepersonal.daos.detalleAjusteDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table AJUSTE.
 */
public class Ajuste {

    private Long id;
    /** Not-null value. */
    private java.util.Date fechaHora;
    private double totalDesfasado;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AjusteDao myDao;

    private List<detalleAjuste> movimientos;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Ajuste() {
    }

    public Ajuste(Long id) {
        this.id = id;
    }

    public Ajuste(Long id, java.util.Date fechaHora, double totalDesfasado) {
        this.id = id;
        this.fechaHora = fechaHora;
        this.totalDesfasado = totalDesfasado;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAjusteDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public java.util.Date getFechaHora() {
        return fechaHora;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFechaHora(java.util.Date fechaHora) {
        this.fechaHora = fechaHora;
    }

    public double getTotalDesfasado() {
        return totalDesfasado;
    }

    public void setTotalDesfasado(double totalDesfasado) {
        this.totalDesfasado = totalDesfasado;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<detalleAjuste> getMovimientos() {
        if (movimientos == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            detalleAjusteDao targetDao = daoSession.getDetalleAjusteDao();
            List<detalleAjuste> movimientosNew = targetDao._queryAjuste_Movimientos(id);
            synchronized (this) {
                if(movimientos == null) {
                    movimientos = movimientosNew;
                }
            }
        }
        return movimientos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMovimientos() {
        movimientos = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
