package com.ernesto.perez.balancepersonal.entidades;

import java.util.List;
import com.ernesto.perez.balancepersonal.daos.DaoSession;
import de.greenrobot.dao.DaoException;

import com.ernesto.perez.balancepersonal.daos.AdjuntoDao;
import com.ernesto.perez.balancepersonal.daos.AnulacionMovDao;
import com.ernesto.perez.balancepersonal.daos.CategoriaDao;
import com.ernesto.perez.balancepersonal.daos.MovimientoDao;
import com.ernesto.perez.balancepersonal.daos.OrigenFinancieroDao;
import com.ernesto.perez.balancepersonal.daos.detalleAjusteDao;
import com.ernesto.perez.balancepersonal.daos.detallePrestamoDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table MOVIMIENTO.
 */
public class Movimiento {

    private Long id;
    /** Not-null value. */
    private String concepto;
    /** Not-null value. */
    private java.util.Date fechaHora;
    private double latitud;
    private double longitud;
    /** Not-null value. */
    private java.util.Date importe;
    private long idCategoria;
    private long idOrigenFinanciero;
    private Long idAnulacion;
    private int estado;
    private Long idAdjunto;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MovimientoDao myDao;

    private AnulacionMov anulacion;
    private Long anulacion__resolvedKey;

    private Adjunto adjunto;
    private Long adjunto__resolvedKey;

    private Categoria categoria;
    private Long categoria__resolvedKey;

    private OrigenFinanciero movimientos;
    private Long movimientos__resolvedKey;

    private List<detallePrestamo> prestamos;
    private List<detalleAjuste> ajustes;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Movimiento() {
    }

    public Movimiento(Long id) {
        this.id = id;
    }

    public Movimiento(Long id, String concepto, java.util.Date fechaHora, double latitud, double longitud, java.util.Date importe, long idCategoria, long idOrigenFinanciero, Long idAnulacion, int estado, Long idAdjunto) {
        this.id = id;
        this.concepto = concepto;
        this.fechaHora = fechaHora;
        this.latitud = latitud;
        this.longitud = longitud;
        this.importe = importe;
        this.idCategoria = idCategoria;
        this.idOrigenFinanciero = idOrigenFinanciero;
        this.idAnulacion = idAnulacion;
        this.estado = estado;
        this.idAdjunto = idAdjunto;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMovimientoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getConcepto() {
        return concepto;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setConcepto(String concepto) {
        this.concepto = concepto;
    }

    /** Not-null value. */
    public java.util.Date getFechaHora() {
        return fechaHora;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFechaHora(java.util.Date fechaHora) {
        this.fechaHora = fechaHora;
    }

    public double getLatitud() {
        return latitud;
    }

    public void setLatitud(double latitud) {
        this.latitud = latitud;
    }

    public double getLongitud() {
        return longitud;
    }

    public void setLongitud(double longitud) {
        this.longitud = longitud;
    }

    /** Not-null value. */
    public java.util.Date getImporte() {
        return importe;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setImporte(java.util.Date importe) {
        this.importe = importe;
    }

    public long getIdCategoria() {
        return idCategoria;
    }

    public void setIdCategoria(long idCategoria) {
        this.idCategoria = idCategoria;
    }

    public long getIdOrigenFinanciero() {
        return idOrigenFinanciero;
    }

    public void setIdOrigenFinanciero(long idOrigenFinanciero) {
        this.idOrigenFinanciero = idOrigenFinanciero;
    }

    public Long getIdAnulacion() {
        return idAnulacion;
    }

    public void setIdAnulacion(Long idAnulacion) {
        this.idAnulacion = idAnulacion;
    }

    public int getEstado() {
        return estado;
    }

    public void setEstado(int estado) {
        this.estado = estado;
    }

    public Long getIdAdjunto() {
        return idAdjunto;
    }

    public void setIdAdjunto(Long idAdjunto) {
        this.idAdjunto = idAdjunto;
    }

    /** To-one relationship, resolved on first access. */
    public AnulacionMov getAnulacion() {
        Long __key = this.idAnulacion;
        if (anulacion__resolvedKey == null || !anulacion__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AnulacionMovDao targetDao = daoSession.getAnulacionMovDao();
            AnulacionMov anulacionNew = targetDao.load(__key);
            synchronized (this) {
                anulacion = anulacionNew;
            	anulacion__resolvedKey = __key;
            }
        }
        return anulacion;
    }

    public void setAnulacion(AnulacionMov anulacion) {
        synchronized (this) {
            this.anulacion = anulacion;
            idAnulacion = anulacion == null ? null : anulacion.getId();
            anulacion__resolvedKey = idAnulacion;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Adjunto getAdjunto() {
        Long __key = this.idAdjunto;
        if (adjunto__resolvedKey == null || !adjunto__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AdjuntoDao targetDao = daoSession.getAdjuntoDao();
            Adjunto adjuntoNew = targetDao.load(__key);
            synchronized (this) {
                adjunto = adjuntoNew;
            	adjunto__resolvedKey = __key;
            }
        }
        return adjunto;
    }

    public void setAdjunto(Adjunto adjunto) {
        synchronized (this) {
            this.adjunto = adjunto;
            idAdjunto = adjunto == null ? null : adjunto.getId();
            adjunto__resolvedKey = idAdjunto;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Categoria getCategoria() {
        long __key = this.idCategoria;
        if (categoria__resolvedKey == null || !categoria__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoriaDao targetDao = daoSession.getCategoriaDao();
            Categoria categoriaNew = targetDao.load(__key);
            synchronized (this) {
                categoria = categoriaNew;
            	categoria__resolvedKey = __key;
            }
        }
        return categoria;
    }

    public void setCategoria(Categoria categoria) {
        if (categoria == null) {
            throw new DaoException("To-one property 'idCategoria' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.categoria = categoria;
            idCategoria = categoria.getId();
            categoria__resolvedKey = idCategoria;
        }
    }

    /** To-one relationship, resolved on first access. */
    public OrigenFinanciero getMovimientos() {
        long __key = this.idOrigenFinanciero;
        if (movimientos__resolvedKey == null || !movimientos__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrigenFinancieroDao targetDao = daoSession.getOrigenFinancieroDao();
            OrigenFinanciero movimientosNew = targetDao.load(__key);
            synchronized (this) {
                movimientos = movimientosNew;
            	movimientos__resolvedKey = __key;
            }
        }
        return movimientos;
    }

    public void setMovimientos(OrigenFinanciero movimientos) {
        if (movimientos == null) {
            throw new DaoException("To-one property 'idOrigenFinanciero' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.movimientos = movimientos;
            idOrigenFinanciero = movimientos.getId();
            movimientos__resolvedKey = idOrigenFinanciero;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<detallePrestamo> getPrestamos() {
        if (prestamos == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            detallePrestamoDao targetDao = daoSession.getDetallePrestamoDao();
            List<detallePrestamo> prestamosNew = targetDao._queryMovimiento_Prestamos(id);
            synchronized (this) {
                if(prestamos == null) {
                    prestamos = prestamosNew;
                }
            }
        }
        return prestamos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPrestamos() {
        prestamos = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<detalleAjuste> getAjustes() {
        if (ajustes == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            detalleAjusteDao targetDao = daoSession.getDetalleAjusteDao();
            List<detalleAjuste> ajustesNew = targetDao._queryMovimiento_Ajustes(id);
            synchronized (this) {
                if(ajustes == null) {
                    ajustes = ajustesNew;
                }
            }
        }
        return ajustes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAjustes() {
        ajustes = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
