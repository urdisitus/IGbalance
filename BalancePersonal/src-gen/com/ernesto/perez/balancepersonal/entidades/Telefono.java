package com.ernesto.perez.balancepersonal.entidades;

import com.ernesto.perez.balancepersonal.daos.DaoSession;
import de.greenrobot.dao.DaoException;

import com.ernesto.perez.balancepersonal.daos.ContactoDao;
import com.ernesto.perez.balancepersonal.daos.TelefonoDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table TELEFONO.
 */
public class Telefono {

    private Long id;
    /** Not-null value. */
    private String telefono;
    private long idContacto;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TelefonoDao myDao;

    private Contacto contacto;
    private Long contacto__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Telefono() {
    }

    public Telefono(Long id) {
        this.id = id;
    }

    public Telefono(Long id, String telefono, long idContacto) {
        this.id = id;
        this.telefono = telefono;
        this.idContacto = idContacto;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTelefonoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTelefono() {
        return telefono;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTelefono(String telefono) {
        this.telefono = telefono;
    }

    public long getIdContacto() {
        return idContacto;
    }

    public void setIdContacto(long idContacto) {
        this.idContacto = idContacto;
    }

    /** To-one relationship, resolved on first access. */
    public Contacto getContacto() {
        long __key = this.idContacto;
        if (contacto__resolvedKey == null || !contacto__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactoDao targetDao = daoSession.getContactoDao();
            Contacto contactoNew = targetDao.load(__key);
            synchronized (this) {
                contacto = contactoNew;
            	contacto__resolvedKey = __key;
            }
        }
        return contacto;
    }

    public void setContacto(Contacto contacto) {
        if (contacto == null) {
            throw new DaoException("To-one property 'idContacto' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.contacto = contacto;
            idContacto = contacto.getId();
            contacto__resolvedKey = idContacto;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
