package com.ernesto.perez.balancepersonal.entidades;

import com.ernesto.perez.balancepersonal.daos.DaoSession;
import de.greenrobot.dao.DaoException;

import com.ernesto.perez.balancepersonal.daos.MovimientoDao;
import com.ernesto.perez.balancepersonal.daos.PrestamoDao;
import com.ernesto.perez.balancepersonal.daos.detallePrestamoDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table DETALLE_PRESTAMO.
 */
public class detallePrestamo {

    private Long id;
    private long idPrestamo;
    private long idMovimiento;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient detallePrestamoDao myDao;

    private Prestamo prestamo;
    private Long prestamo__resolvedKey;

    private Movimiento movimiento;
    private Long movimiento__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public detallePrestamo() {
    }

    public detallePrestamo(Long id) {
        this.id = id;
    }

    public detallePrestamo(Long id, long idPrestamo, long idMovimiento) {
        this.id = id;
        this.idPrestamo = idPrestamo;
        this.idMovimiento = idMovimiento;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDetallePrestamoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getIdPrestamo() {
        return idPrestamo;
    }

    public void setIdPrestamo(long idPrestamo) {
        this.idPrestamo = idPrestamo;
    }

    public long getIdMovimiento() {
        return idMovimiento;
    }

    public void setIdMovimiento(long idMovimiento) {
        this.idMovimiento = idMovimiento;
    }

    /** To-one relationship, resolved on first access. */
    public Prestamo getPrestamo() {
        long __key = this.idPrestamo;
        if (prestamo__resolvedKey == null || !prestamo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PrestamoDao targetDao = daoSession.getPrestamoDao();
            Prestamo prestamoNew = targetDao.load(__key);
            synchronized (this) {
                prestamo = prestamoNew;
            	prestamo__resolvedKey = __key;
            }
        }
        return prestamo;
    }

    public void setPrestamo(Prestamo prestamo) {
        if (prestamo == null) {
            throw new DaoException("To-one property 'idPrestamo' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.prestamo = prestamo;
            idPrestamo = prestamo.getId();
            prestamo__resolvedKey = idPrestamo;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Movimiento getMovimiento() {
        long __key = this.idPrestamo;
        if (movimiento__resolvedKey == null || !movimiento__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MovimientoDao targetDao = daoSession.getMovimientoDao();
            Movimiento movimientoNew = targetDao.load(__key);
            synchronized (this) {
                movimiento = movimientoNew;
            	movimiento__resolvedKey = __key;
            }
        }
        return movimiento;
    }

    public void setMovimiento(Movimiento movimiento) {
        if (movimiento == null) {
            throw new DaoException("To-one property 'idPrestamo' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.movimiento = movimiento;
            idPrestamo = movimiento.getId();
            movimiento__resolvedKey = idPrestamo;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
