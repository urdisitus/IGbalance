package com.ernesto.perez.balancepersonal.entidades;

import java.util.List;
import com.ernesto.perez.balancepersonal.daos.DaoSession;
import de.greenrobot.dao.DaoException;

import com.ernesto.perez.balancepersonal.daos.ContactoDao;
import com.ernesto.perez.balancepersonal.daos.ImagenDao;
import com.ernesto.perez.balancepersonal.daos.PrestamoDao;
import com.ernesto.perez.balancepersonal.daos.TelefonoDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CONTACTO.
 */
public class Contacto {

    private Long id;
    /** Not-null value. */
    private String nombre;
    /** Not-null value. */
    private String email;
    private long idFoto;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ContactoDao myDao;

    private Imagen foto;
    private Long foto__resolvedKey;

    private List<Telefono> telefonos;
    private List<Prestamo> prestamos;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Contacto() {
    }

    public Contacto(Long id) {
        this.id = id;
    }

    public Contacto(Long id, String nombre, String email, long idFoto) {
        this.id = id;
        this.nombre = nombre;
        this.email = email;
        this.idFoto = idFoto;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContactoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getNombre() {
        return nombre;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    /** Not-null value. */
    public String getEmail() {
        return email;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEmail(String email) {
        this.email = email;
    }

    public long getIdFoto() {
        return idFoto;
    }

    public void setIdFoto(long idFoto) {
        this.idFoto = idFoto;
    }

    /** To-one relationship, resolved on first access. */
    public Imagen getFoto() {
        long __key = this.idFoto;
        if (foto__resolvedKey == null || !foto__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ImagenDao targetDao = daoSession.getImagenDao();
            Imagen fotoNew = targetDao.load(__key);
            synchronized (this) {
                foto = fotoNew;
            	foto__resolvedKey = __key;
            }
        }
        return foto;
    }

    public void setFoto(Imagen foto) {
        if (foto == null) {
            throw new DaoException("To-one property 'idFoto' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.foto = foto;
            idFoto = foto.getId();
            foto__resolvedKey = idFoto;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Telefono> getTelefonos() {
        if (telefonos == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TelefonoDao targetDao = daoSession.getTelefonoDao();
            List<Telefono> telefonosNew = targetDao._queryContacto_Telefonos(id);
            synchronized (this) {
                if(telefonos == null) {
                    telefonos = telefonosNew;
                }
            }
        }
        return telefonos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTelefonos() {
        telefonos = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Prestamo> getPrestamos() {
        if (prestamos == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PrestamoDao targetDao = daoSession.getPrestamoDao();
            List<Prestamo> prestamosNew = targetDao._queryContacto_Prestamos(id);
            synchronized (this) {
                if(prestamos == null) {
                    prestamos = prestamosNew;
                }
            }
        }
        return prestamos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPrestamos() {
        prestamos = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
