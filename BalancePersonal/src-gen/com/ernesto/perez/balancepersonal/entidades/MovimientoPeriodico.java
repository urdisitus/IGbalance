package com.ernesto.perez.balancepersonal.entidades;

import java.util.List;
import com.ernesto.perez.balancepersonal.daos.DaoSession;
import de.greenrobot.dao.DaoException;

import com.ernesto.perez.balancepersonal.daos.CategoriaDao;
import com.ernesto.perez.balancepersonal.daos.DetalleMovPeriodicoDao;
import com.ernesto.perez.balancepersonal.daos.MovimientoPeriodicoDao;
import com.ernesto.perez.balancepersonal.daos.OrigenFinancieroDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table MOVIMIENTO_PERIODICO.
 */
public class MovimientoPeriodico {

    private Long id;
    /** Not-null value. */
    private java.util.Date fechaModificacion;
    private int intervalo;
    private int estado;
    private double monto;
    private long idCategoria;
    private long idOrigenFinanciero;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MovimientoPeriodicoDao myDao;

    private Categoria categoria;
    private Long categoria__resolvedKey;

    private OrigenFinanciero origenFinanciero;
    private Long origenFinanciero__resolvedKey;

    private List<DetalleMovPeriodico> detalleMovimientoPeriodico;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public MovimientoPeriodico() {
    }

    public MovimientoPeriodico(Long id) {
        this.id = id;
    }

    public MovimientoPeriodico(Long id, java.util.Date fechaModificacion, int intervalo, int estado, double monto, long idCategoria, long idOrigenFinanciero) {
        this.id = id;
        this.fechaModificacion = fechaModificacion;
        this.intervalo = intervalo;
        this.estado = estado;
        this.monto = monto;
        this.idCategoria = idCategoria;
        this.idOrigenFinanciero = idOrigenFinanciero;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMovimientoPeriodicoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public java.util.Date getFechaModificacion() {
        return fechaModificacion;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFechaModificacion(java.util.Date fechaModificacion) {
        this.fechaModificacion = fechaModificacion;
    }

    public int getIntervalo() {
        return intervalo;
    }

    public void setIntervalo(int intervalo) {
        this.intervalo = intervalo;
    }

    public int getEstado() {
        return estado;
    }

    public void setEstado(int estado) {
        this.estado = estado;
    }

    public double getMonto() {
        return monto;
    }

    public void setMonto(double monto) {
        this.monto = monto;
    }

    public long getIdCategoria() {
        return idCategoria;
    }

    public void setIdCategoria(long idCategoria) {
        this.idCategoria = idCategoria;
    }

    public long getIdOrigenFinanciero() {
        return idOrigenFinanciero;
    }

    public void setIdOrigenFinanciero(long idOrigenFinanciero) {
        this.idOrigenFinanciero = idOrigenFinanciero;
    }

    /** To-one relationship, resolved on first access. */
    public Categoria getCategoria() {
        long __key = this.idCategoria;
        if (categoria__resolvedKey == null || !categoria__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoriaDao targetDao = daoSession.getCategoriaDao();
            Categoria categoriaNew = targetDao.load(__key);
            synchronized (this) {
                categoria = categoriaNew;
            	categoria__resolvedKey = __key;
            }
        }
        return categoria;
    }

    public void setCategoria(Categoria categoria) {
        if (categoria == null) {
            throw new DaoException("To-one property 'idCategoria' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.categoria = categoria;
            idCategoria = categoria.getId();
            categoria__resolvedKey = idCategoria;
        }
    }

    /** To-one relationship, resolved on first access. */
    public OrigenFinanciero getOrigenFinanciero() {
        long __key = this.idOrigenFinanciero;
        if (origenFinanciero__resolvedKey == null || !origenFinanciero__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrigenFinancieroDao targetDao = daoSession.getOrigenFinancieroDao();
            OrigenFinanciero origenFinancieroNew = targetDao.load(__key);
            synchronized (this) {
                origenFinanciero = origenFinancieroNew;
            	origenFinanciero__resolvedKey = __key;
            }
        }
        return origenFinanciero;
    }

    public void setOrigenFinanciero(OrigenFinanciero origenFinanciero) {
        if (origenFinanciero == null) {
            throw new DaoException("To-one property 'idOrigenFinanciero' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.origenFinanciero = origenFinanciero;
            idOrigenFinanciero = origenFinanciero.getId();
            origenFinanciero__resolvedKey = idOrigenFinanciero;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DetalleMovPeriodico> getDetalleMovimientoPeriodico() {
        if (detalleMovimientoPeriodico == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DetalleMovPeriodicoDao targetDao = daoSession.getDetalleMovPeriodicoDao();
            List<DetalleMovPeriodico> detalleMovimientoPeriodicoNew = targetDao._queryMovimientoPeriodico_DetalleMovimientoPeriodico(id);
            synchronized (this) {
                if(detalleMovimientoPeriodico == null) {
                    detalleMovimientoPeriodico = detalleMovimientoPeriodicoNew;
                }
            }
        }
        return detalleMovimientoPeriodico;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDetalleMovimientoPeriodico() {
        detalleMovimientoPeriodico = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
