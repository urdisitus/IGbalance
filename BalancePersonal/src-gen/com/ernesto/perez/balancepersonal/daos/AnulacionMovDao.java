package com.ernesto.perez.balancepersonal.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ernesto.perez.balancepersonal.entidades.AnulacionMov;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ANULACION_MOV.
*/
public class AnulacionMovDao extends AbstractDao<AnulacionMov, Long> {

    public static final String TABLENAME = "ANULACION_MOV";

    /**
     * Properties of entity AnulacionMov.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FechaHora = new Property(1, java.util.Date.class, "fechaHora", false, "FECHA_HORA");
        public final static Property Motivo = new Property(2, String.class, "motivo", false, "MOTIVO");
    };

    private DaoSession daoSession;


    public AnulacionMovDao(DaoConfig config) {
        super(config);
    }
    
    public AnulacionMovDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ANULACION_MOV' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'FECHA_HORA' INTEGER NOT NULL ," + // 1: fechaHora
                "'MOTIVO' TEXT NOT NULL );"); // 2: motivo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ANULACION_MOV'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AnulacionMov entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFechaHora().getTime());
        stmt.bindString(3, entity.getMotivo());
    }

    @Override
    protected void attachEntity(AnulacionMov entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AnulacionMov readEntity(Cursor cursor, int offset) {
        AnulacionMov entity = new AnulacionMov( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // fechaHora
            cursor.getString(offset + 2) // motivo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AnulacionMov entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFechaHora(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setMotivo(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AnulacionMov entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AnulacionMov entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
