package com.ernesto.perez.balancepersonal.daos;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.ernesto.perez.balancepersonal.entidades.Adjunto;
import com.ernesto.perez.balancepersonal.entidades.AnulacionMov;
import com.ernesto.perez.balancepersonal.entidades.Categoria;
import com.ernesto.perez.balancepersonal.entidades.OrigenFinanciero;

import com.ernesto.perez.balancepersonal.entidades.Movimiento;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MOVIMIENTO.
*/
public class MovimientoDao extends AbstractDao<Movimiento, Long> {

    public static final String TABLENAME = "MOVIMIENTO";

    /**
     * Properties of entity Movimiento.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Concepto = new Property(1, String.class, "concepto", false, "CONCEPTO");
        public final static Property FechaHora = new Property(2, java.util.Date.class, "fechaHora", false, "FECHA_HORA");
        public final static Property Latitud = new Property(3, double.class, "latitud", false, "LATITUD");
        public final static Property Longitud = new Property(4, double.class, "longitud", false, "LONGITUD");
        public final static Property Importe = new Property(5, java.util.Date.class, "importe", false, "IMPORTE");
        public final static Property IdCategoria = new Property(6, long.class, "idCategoria", false, "ID_CATEGORIA");
        public final static Property IdOrigenFinanciero = new Property(7, long.class, "idOrigenFinanciero", false, "ID_ORIGEN_FINANCIERO");
        public final static Property IdAnulacion = new Property(8, Long.class, "idAnulacion", false, "ID_ANULACION");
        public final static Property Estado = new Property(9, int.class, "estado", false, "ESTADO");
        public final static Property IdAdjunto = new Property(10, Long.class, "idAdjunto", false, "ID_ADJUNTO");
    };

    private DaoSession daoSession;

    private Query<Movimiento> categoria_MovimientosQuery;
    private Query<Movimiento> origenFinanciero_OrigenFinancieroQuery;

    public MovimientoDao(DaoConfig config) {
        super(config);
    }
    
    public MovimientoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MOVIMIENTO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CONCEPTO' TEXT NOT NULL ," + // 1: concepto
                "'FECHA_HORA' INTEGER NOT NULL ," + // 2: fechaHora
                "'LATITUD' REAL NOT NULL ," + // 3: latitud
                "'LONGITUD' REAL NOT NULL ," + // 4: longitud
                "'IMPORTE' INTEGER NOT NULL ," + // 5: importe
                "'ID_CATEGORIA' INTEGER NOT NULL ," + // 6: idCategoria
                "'ID_ORIGEN_FINANCIERO' INTEGER NOT NULL ," + // 7: idOrigenFinanciero
                "'ID_ANULACION' INTEGER," + // 8: idAnulacion
                "'ESTADO' INTEGER NOT NULL ," + // 9: estado
                "'ID_ADJUNTO' INTEGER);"); // 10: idAdjunto
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MOVIMIENTO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Movimiento entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getConcepto());
        stmt.bindLong(3, entity.getFechaHora().getTime());
        stmt.bindDouble(4, entity.getLatitud());
        stmt.bindDouble(5, entity.getLongitud());
        stmt.bindLong(6, entity.getImporte().getTime());
        stmt.bindLong(7, entity.getIdCategoria());
        stmt.bindLong(8, entity.getIdOrigenFinanciero());
 
        Long idAnulacion = entity.getIdAnulacion();
        if (idAnulacion != null) {
            stmt.bindLong(9, idAnulacion);
        }
        stmt.bindLong(10, entity.getEstado());
 
        Long idAdjunto = entity.getIdAdjunto();
        if (idAdjunto != null) {
            stmt.bindLong(11, idAdjunto);
        }
    }

    @Override
    protected void attachEntity(Movimiento entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Movimiento readEntity(Cursor cursor, int offset) {
        Movimiento entity = new Movimiento( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // concepto
            new java.util.Date(cursor.getLong(offset + 2)), // fechaHora
            cursor.getDouble(offset + 3), // latitud
            cursor.getDouble(offset + 4), // longitud
            new java.util.Date(cursor.getLong(offset + 5)), // importe
            cursor.getLong(offset + 6), // idCategoria
            cursor.getLong(offset + 7), // idOrigenFinanciero
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // idAnulacion
            cursor.getInt(offset + 9), // estado
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // idAdjunto
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Movimiento entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConcepto(cursor.getString(offset + 1));
        entity.setFechaHora(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setLatitud(cursor.getDouble(offset + 3));
        entity.setLongitud(cursor.getDouble(offset + 4));
        entity.setImporte(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setIdCategoria(cursor.getLong(offset + 6));
        entity.setIdOrigenFinanciero(cursor.getLong(offset + 7));
        entity.setIdAnulacion(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setEstado(cursor.getInt(offset + 9));
        entity.setIdAdjunto(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Movimiento entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Movimiento entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "movimientos" to-many relationship of Categoria. */
    public List<Movimiento> _queryCategoria_Movimientos(long idCategoria) {
        synchronized (this) {
            if (categoria_MovimientosQuery == null) {
                QueryBuilder<Movimiento> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdCategoria.eq(null));
                categoria_MovimientosQuery = queryBuilder.build();
            }
        }
        Query<Movimiento> query = categoria_MovimientosQuery.forCurrentThread();
        query.setParameter(0, idCategoria);
        return query.list();
    }

    /** Internal query to resolve the "origenFinanciero" to-many relationship of OrigenFinanciero. */
    public List<Movimiento> _queryOrigenFinanciero_OrigenFinanciero(long idOrigenFinanciero) {
        synchronized (this) {
            if (origenFinanciero_OrigenFinancieroQuery == null) {
                QueryBuilder<Movimiento> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdOrigenFinanciero.eq(null));
                origenFinanciero_OrigenFinancieroQuery = queryBuilder.build();
            }
        }
        Query<Movimiento> query = origenFinanciero_OrigenFinancieroQuery.forCurrentThread();
        query.setParameter(0, idOrigenFinanciero);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAnulacionMovDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getAdjuntoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getCategoriaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getOrigenFinancieroDao().getAllColumns());
            builder.append(" FROM MOVIMIENTO T");
            builder.append(" LEFT JOIN ANULACION_MOV T0 ON T.'ID_ANULACION'=T0.'_id'");
            builder.append(" LEFT JOIN ADJUNTO T1 ON T.'ID_ADJUNTO'=T1.'_id'");
            builder.append(" LEFT JOIN CATEGORIA T2 ON T.'ID_CATEGORIA'=T2.'_id'");
            builder.append(" LEFT JOIN ORIGEN_FINANCIERO T3 ON T.'ID_ORIGEN_FINANCIERO'=T3.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Movimiento loadCurrentDeep(Cursor cursor, boolean lock) {
        Movimiento entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        AnulacionMov anulacion = loadCurrentOther(daoSession.getAnulacionMovDao(), cursor, offset);
        entity.setAnulacion(anulacion);
        offset += daoSession.getAnulacionMovDao().getAllColumns().length;

        Adjunto adjunto = loadCurrentOther(daoSession.getAdjuntoDao(), cursor, offset);
        entity.setAdjunto(adjunto);
        offset += daoSession.getAdjuntoDao().getAllColumns().length;

        Categoria categoria = loadCurrentOther(daoSession.getCategoriaDao(), cursor, offset);
         if(categoria != null) {
            entity.setCategoria(categoria);
        }
        offset += daoSession.getCategoriaDao().getAllColumns().length;

        OrigenFinanciero movimientos = loadCurrentOther(daoSession.getOrigenFinancieroDao(), cursor, offset);
         if(movimientos != null) {
            entity.setMovimientos(movimientos);
        }

        return entity;    
    }

    public Movimiento loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Movimiento> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Movimiento> list = new ArrayList<Movimiento>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Movimiento> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Movimiento> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
