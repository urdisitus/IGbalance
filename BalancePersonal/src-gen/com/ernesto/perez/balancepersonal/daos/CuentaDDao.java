package com.ernesto.perez.balancepersonal.daos;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.ernesto.perez.balancepersonal.datos.entidades.BancoD;
import com.ernesto.perez.balancepersonal.datos.entidades.OrigenFinancieroD;

import com.ernesto.perez.balancepersonal.datos.entidades.CuentaD;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CUENTA_D.
*/
public class CuentaDDao extends AbstractDao<CuentaD, Long> {

    public static final String TABLENAME = "CUENTA_D";

    /**
     * Properties of entity CuentaD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IdOrigenFinanciero = new Property(0, Long.class, "idOrigenFinanciero", true, "ID_ORIGEN_FINANCIERO");
        public final static Property NroCuenta = new Property(1, String.class, "nroCuenta", false, "NRO_CUENTA");
        public final static Property IdBanco = new Property(2, long.class, "idBanco", false, "ID_BANCO");
    };

    private DaoSession daoSession;

    private Query<CuentaD> bancoD_CuentasQuery;

    public CuentaDDao(DaoConfig config) {
        super(config);
    }
    
    public CuentaDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CUENTA_D' (" + //
                "'ID_ORIGEN_FINANCIERO' INTEGER PRIMARY KEY ," + // 0: idOrigenFinanciero
                "'NRO_CUENTA' TEXT NOT NULL ," + // 1: nroCuenta
                "'ID_BANCO' INTEGER NOT NULL );"); // 2: idBanco
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CUENTA_D'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CuentaD entity) {
        stmt.clearBindings();
 
        Long idOrigenFinanciero = entity.getIdOrigenFinanciero();
        if (idOrigenFinanciero != null) {
            stmt.bindLong(1, idOrigenFinanciero);
        }
        stmt.bindString(2, entity.getNroCuenta());
        stmt.bindLong(3, entity.getIdBanco());
    }

    @Override
    protected void attachEntity(CuentaD entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CuentaD readEntity(Cursor cursor, int offset) {
        CuentaD entity = new CuentaD( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idOrigenFinanciero
            cursor.getString(offset + 1), // nroCuenta
            cursor.getLong(offset + 2) // idBanco
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CuentaD entity, int offset) {
        entity.setIdOrigenFinanciero(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNroCuenta(cursor.getString(offset + 1));
        entity.setIdBanco(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CuentaD entity, long rowId) {
        entity.setIdOrigenFinanciero(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CuentaD entity) {
        if(entity != null) {
            return entity.getIdOrigenFinanciero();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "cuentas" to-many relationship of BancoD. */
    public List<CuentaD> _queryBancoD_Cuentas(long idBanco) {
        synchronized (this) {
            if (bancoD_CuentasQuery == null) {
                QueryBuilder<CuentaD> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdBanco.eq(null));
                bancoD_CuentasQuery = queryBuilder.build();
            }
        }
        Query<CuentaD> query = bancoD_CuentasQuery.forCurrentThread();
        query.setParameter(0, idBanco);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getOrigenFinancieroDDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getBancoDDao().getAllColumns());
            builder.append(" FROM CUENTA_D T");
            builder.append(" LEFT JOIN ORIGEN_FINANCIERO_D T0 ON T.'ID_ORIGEN_FINANCIERO'=T0.'_id'");
            builder.append(" LEFT JOIN BANCO_D T1 ON T.'ID_BANCO'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CuentaD loadCurrentDeep(Cursor cursor, boolean lock) {
        CuentaD entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        OrigenFinancieroD cuenta = loadCurrentOther(daoSession.getOrigenFinancieroDDao(), cursor, offset);
        entity.setCuenta(cuenta);
        offset += daoSession.getOrigenFinancieroDDao().getAllColumns().length;

        BancoD banco = loadCurrentOther(daoSession.getBancoDDao(), cursor, offset);
         if(banco != null) {
            entity.setBanco(banco);
        }

        return entity;    
    }

    public CuentaD loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CuentaD> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CuentaD> list = new ArrayList<CuentaD>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CuentaD> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CuentaD> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
